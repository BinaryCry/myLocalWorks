<<<<<<< HEAD
﻿C# Sharp
=======
﻿C#
>>>>>>> 82a4f85ad7eb7d11eed1f074f19bb6ac4aba998f
---

CLR - common language runtime - среда выполнения языка (C#, BASIK.NET)
MSIL - Microsoft Intermediate Language - Common Intermediate Language (уже новый) - промежуточный язык для .NET - C#, BASIC.NET (из VS на машину клиента может прийти код на промежуточном языке) --> CIL --> .NET (на этом этапе компилируется CIL в машинный код специально под то железо, на котором запускается программа)

caspol - утилита cmd. упраляет правами
ildasm - дизасемблирование сборки с спромежуточнго языка
gacutil - .net общее хранилище для нетовских проектов
makecert - создать сертифика
Sn - генерация ключей для подписания проекта
Ngen - утилита для компилирования перед запуском проекта. как только прект переносится на машину, его можно скомпилирвать не дожидаясь запуска самой программы
reflect - из CIL в код C#, BASIC.NET, ...

assembly --> solution --> [projects]

snippets - инсталлированные в VS текстовые файлы. Проще говоря, это заготовка. Оформляется с помощью xml разметки (имя и дважды Tab)

все переменные в C# - объекты, но! Простейшие типы данных ведут они себя как простые переменные (кроме string) (загружаются в стек и занимают определенное количество байт), чтобы не перенагружать систему. Созданные они от класса typevalue и имеют сбое поведение. Иерархия у всех одна, а поведение разное.

Все конструкторы переменных в C# инициализируются нулями, то есть int n = new int() == 0, а если просто int n;, то переменная будет объявлена, размещена в стеке, но не инициализирвана

readonly - можно инициализировать и изменять в конструкторе класса. То есть при необходимости. К примеру, если программа запустится, а нужно взять текущее время запуска. С константой так не получится
https://msdn.microsoft.com/ru-ru/library/acdd6hb7.aspx
const - объявление невозможно, только инициализация

Массивы: одномерный, многмерный, ступенчатый

https://ru.wikipedia.org/wiki/Component_Object_Model





Windows Communication Foundation (WCF)